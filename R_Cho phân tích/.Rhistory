style = list(color = "#rf8f9fa",
textOutline = F,
fontWeight = 'bold',
fontSize = 18))%>%
hc_tooltip(pointFormat = '<b>{point.y:.1f}</b>')
writing <- summary_gender_writing %>%
hchart("pie", hcaes(x = gender, y = "Total_writing"),
borderWidth = 0, dataLabels = list(enabled = T,
distance = -67,
style = list(color = "#rf8f9fa",
textOutline = F,
fontWeight = 'bold',
fontSize = 18),
format = '<b>{point.name}</b>: {point.percentage:.1f} %', connectorColor = 'silver'))%>%
hc_colors(c("#fc8eac", "#00ccff"))%>%
hc_title(text = "Total Writings Score by Gender",
style = list(color = "#rf8f9fa",
textOutline = F,
fontWeight = 'bold',
fontSize = 18))%>%
hc_tooltip(pointFormat = '<b>{point.y:.1f}</b>')
math
reading
writing
knitr::opts_chunk$set(echo = TRUE)
library(highcharter)
library(corrplot)
library(randomForest)
library(caTools)
library(ROCR)
library(e1071)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(htmlwidgets)
library('IRdisplay')
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
Students <- subset(dt, select = c(-race.ethnicity,-test_preparation_course, -lunch,-parental_level_of_education))
# loại các biến -race.ethnicity,-test_preparation_course, -lunch,-parental_level_of_education
colnames(Students) <-  c("Gender","Math_Score","Reading_Score","Writing_Score","Total_Score")
# đổi tên các biến Gender","Math_Score","Reading_Score","Writing_Score
head(Students)
Students <- subset(dt, select = c(-race.ethnicity,-test_preparation_course, -lunch,-parental_level_of_education))
# loại các biến -race.ethnicity,-test_preparation_course, -lunch,-parental_level_of_education
colnames(Students) <-  c("Gender","Math_Score","Reading_Score","Writing_Score","Total_Score")
# đổi tên các biến Gender","Math_Score","Reading_Score","Writing_Score
head(Students)
name(dt)
Students <- subset(dt, select = c(-race.ethnicity,-test_preparation_course, -lunch,-parental_level_of_education))
# loại các biến -race.ethnicity,-test_preparation_course, -lunch,-parental_level_of_education
colnames(Students) <-  c("Gender","Math_Score","Reading_Score","Writing_Score","Total_Score")
# đổi tên các biến Gender","Math_Score","Reading_Score","Writing_Score
head(Students)
#Import data
dt = read.csv("./StudentsPerformance.csv", header = TRUE)
str(dt)
#Tên các biến
names(dt)
#Kiểu dữ liệu từng biến
sapply(dt, class)
students <- Students %>%
pivot_longer(cols = c(Math_Score, Reading_Score, Writing_Score, Total_Score), names_to = "subject", values_to = "score") %>%
separate(subject, c("subject",NA))
head(students)
students <- Students %>%
pivot_longer(cols = c(Math_Score, Reading_Score, Writing_Score), names_to = "subject", values_to = "score") %>%
separate(subject, c("subject",NA))
head(students)
gender_score <- students %>%
group_by(Gender, subject) %>%
summarise(
avg.score = round(mean(score),1),
std.score = round(sd(score),1),
.groups = "drop"
)
#tạo tập dữ liệu trung bình điểm các môn toán, đọc, viết theo giới tính
bp<-ggplot(gender_score,
aes(
x = subject,
y = avg.score,
fill = Gender
)) +
geom_bar(stat = "identity",
position = "dodge",
color = "black"
) +
scale_fill_brewer(palette = "Pastel1") +
geom_text(aes(label = avg.score),
position = position_dodge(0.9),
vjust = -0.2,
size = 5) +
ylim(0,100) +
theme(
axis.text = element_text(size = 15),
axis.title = element_text(size = 20),
legend.text = element_text(size = 12),
legend.title = element_text(size = 15)
)
plot(bp) # thể hiện tập dữ liệu trung bình điểm các môn toán, đọc, viết theo giới tính dưới dạng biểu đồ
histogram <- students %>%
mutate( bin = cut_interval(score, n=10) )%>%
group_by(bin, Gender, subject) %>%
summarise(
n = n(),
.groups = "drop"
)
histogram <- students %>%
mutate( bin = cut_interval(score, n=10) )%>%
group_by(bin, Gender, subject) %>%
summarise(
n = n(),
.groups = "drop"
)
hist <- ggplot(histogram,
aes(
x = bin,
y = n,
fill = Gender
)) +
geom_bar(stat = "identity",
position = position_dodge2(preserve = "single"),
color = "black",
width = 0.8) +
facet_wrap(~subject, nrow = 3) +
scale_fill_brewer(palette = "Pastel1") +
theme(
axis.text.x = element_text(angle = 45, vjust = 0.6),
axis.title.x = element_blank(),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20),
legend.text = element_text(size = 12),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15)
)
hist
table(Students$Gender)
t.test(Students$Math_Score ~ Students$Gender,var.equal = TRUE)
t.test(Students$Reading_Score ~ Students$Gender,var.equal = TRUE)
table(Students_$lunch)
table(dt$lunch)
students <- subset(dt, select = c(-race.ethnicity,-test_preparation_course, -gender,-parental_level_of_education,-total_score))
colnames(students) <-  c("Lunch","Math_Score","Reading_Score","Writing_Score")
head(students)
br <- ggplot(students, aes(Lunch, Reading_Score))
br <- br + geom_boxplot(fill='lavender')
br <- br + ggtitle("Reading scores by Lunch Boxplot")
br <- br + xlab("Lunch") + ylab("Reading Scores")
br
bw <- ggplot(students, aes(Lunch, Writing_Score))
bw <- bw + geom_boxplot(fill='lavender')
bw <- bw + ggtitle("Writing scores by Lunch Boxplot")
bw <- bw + xlab("Lunch") + ylab("Writing Scores")
bw
bm <- ggplot(students, aes(Lunch, Math_Score))
bm <- bm + geom_boxplot(fill='lavender')
bm <- bm + ggtitle("Math scores by Lunch Boxplot")
bm <- bm + xlab("Lunch") + ylab("Math Scores")
bm
students$avg.score =  round(apply(students[,c("Math_Score","Reading_Score","Writing_Score")],FUN = mean, MARGIN = 1),2)
var.test(students$avg.score ~ students$Lunch)
t.test(students$avg.score ~ students$Lunch,var.equal = FALSE)
table(Students_$parental.level.of.education)
table(dt$parental_level_of_education)
students <- subset(dt, select = c(-race.ethnicity,-lunch,-gender,-test_preparation_course, -total_score))
colnames(students) <-  c("Parent_Education","Math_Score","Reading_Score","Writing_Score")
students <- students %>%
pivot_longer(cols = c(Math_Score, Reading_Score, Writing_Score), names_to = "subject", values_to = "score") %>%
separate(subject, c("subject",NA))
students$Parent_Education <- factor(students$Parent_Education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor\'s degree", "master\'s degree"))
#phân loại thành tích học tập của phụ huynh
edu_score<- students %>%
group_by(Parent_Education, subject) %>%
summarise(
avg.score = round(mean(score),1),
std.score = round(sd(score),1),
.groups = "drop"
)
gp <- ggplot(edu_score,
aes(x = Parent_Education)) +
geom_point(aes(y = avg.score), color = "tomato", shape = 18, size = 5) +
geom_point(aes(y = std.score/0.2), color = "slategray3", shape = 20, size = 5) +
scale_y_continuous(
"avg.score",
sec.axis = sec_axis(~. * 0.2, name = "std.score")
) +
facet_wrap(~subject, nrow = 3) +
theme(
axis.text.x = element_text(angle = 10, vjust = 0.6),
axis.text = element_text(size = 12),
axis.title.x = element_text(size = 20),
axis.title.y.left = element_text(size = 20, color = "tomato"),
axis.title.y.right = element_text(size = 20, color = "slategray3"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15)
)
gp
histogram <- students %>%
mutate(bin = cut_interval(score, n=10)) %>%
group_by(bin, Parent_Education) %>%
summarise(
n = n(),
.groups = "drop"
)
hist <- ggplot(histogram,
aes(
x = bin,
y = n,
fill = Parent_Education
)) +
geom_bar(stat = "identity",
position = position_dodge2(preserve = "single"),
color = "black",
width = 0.8) +
scale_fill_brewer(palette = "Pastel1") +
theme(
axis.text.x = element_text(angle = 45, vjust = 0.6),
axis.title.x = element_blank(),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20),
legend.text = element_text(size = 12),
legend.title = element_text(size = 15),
strip.text = element_text(size = 15)
)
hist
Students <- dt %>% rename(race = race.ethnicity, parent.ed = parental_level_of_education,
test.prep = test_preparation_course, m.score = math_score,
r.score = reading_score, w.score = writing_score)
colnames(Students)
#kiểm tra xem có giá trị nào bị thiếu hoặc NA
sapply(Students, function(x)sum(is.na(x)))
Students <- Students %>% mutate (Avg.score = (r.score + m.score + w.score)/3)
head(Students,n=10)
#Sử dụng nrow để lấy số hàng trong bộ dữ liệu Students (N)
(N <- nrow(Students))
# tính xem 75% của N phải là bao nhiêu hàng, sử dụng hàm round() để lấy số nguyên
(target <- round(N*.75))
# tạo một vectơ gồm N biến ngẫu nhiên thống nhất
st <- runif(N)
#Sử dụng st để tạo tập huấn luyện: student_train(75% dữ liệu) và student(25% dữ liệu)
Student_train <- Students[st < .75, ]
Student_test <- Students[st >= .75, ]
nrow(Student_train)
nrow(Student_test)
#seed
set.seed(122)
# Kiểm tra str của Student_train
str(Student_train)
# Hạt giống ngẫu nhiên để tái tạo kết quả
seed <- set.seed(1234)
# outcome column
(outcome <- "Avg.score")
# Biến truyền vào
(vars <- c("gender", "race", "parent.ed", "lunch", "test.prep"))
# Tạo chuỗi công thức cho Điểm trung bình dưới dạng một hàm của đầu vào
(fmla <- paste(outcome, "~", paste(vars, collapse = " + ")))
# Gọi thư viện ranger
library(ranger) # nếu kết quả là số, ranger sẽ tự động thực hiện hồi quy thay vì phân loại.
#install.packages("rlang")
install.packages("ranger")
#install.packages("rlang")
install.packages("ranger")
options(repos=c(cran="http://cran.rstudio.com"))
install.packages("shiny")
#install.packages("rlang")
options(repos=c(cran="http://cran.rstudio.com"))
install.packages("ranger")
getwd()
.libPaths()
.libPaths("C:/Program Files/R/R-4.2.1/library")
.libPaths()
install.packages("ranger")
.libPaths()
#install.packages("rlang")
options(repos=c(cran="http://cran.rstudio.com"))
install.packages("ranger")
#install.packages("rlang")
options(repos=c(cran="http://cran.rstudio.com"))
install.packages("ranger")
#install.packages("rlang")
install.packages("ranger")
#install.packages("rlang")
install.packages("ranger")
#install.packages("rlang")
install.packages("ranger")
library(highcharter)
library(corrplot)
library(randomForest)
library(caTools)
library(ROCR)
library(e1071)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(htmlwidgets)
library('IRdisplay')
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(ranger)
#install.packages("rlang")
install.packages("ranger")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("vctrs")
library(caret)
#install.packages("vctrs")
library(caret)
library(highcharter)
install.packages("vctrs")
#library(caret)
install.packages("vctrs")
install.packages("vctrs")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("vctrs")
library(caret)
library(highcharter)
knitr::opts_chunk$set(echo = TRUE)
library(highcharter)
install.packages(‘vctrs’)
install.packages("‘vctrs’")
library(highcharter)
install.packages("vctrs", repos = "https://packagemanager.rstudio.com/cran/latest")
install.packages("vctrs", repos = "https://packagemanager.rstudio.com/cran/latest")
install.packages("vctrs", repos = "https://packagemanager.rstudio.com/cran/latest")
knitr::opts_chunk$set(echo = TRUE)
library(highcharter)
library(corrplot)
library(randomForest)
library(caTools)
library(ROCR)
library(e1071)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(htmlwidgets)
library('IRdisplay')
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(ranger)
library(ggpubr)
library(naniar)
library(car)
library(caret)
library(parsnip)
library(highcharter)
library(corrplot)
library(randomForest)
library(caTools)
library(ROCR)
library(e1071)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(htmlwidgets)
library('IRdisplay')
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(ranger)
library(ggpubr)
library(naniar)
library(car)
library(caret)
library(parsnip)
#Import data
dt = read.csv("./StudentsPerformance.csv", header = TRUE)
str(dt)
#du doan tap du lieu data_test
lm_pred <- predict(student_lm, newdata = data_test %>% select(-total_score))
#xay dung model Multiple Linear Regression
student_lm <- lm(total_score ~ reading_score + writing_score + gender + test_preparation_course, data = data_train)
set.seed(123)
samplesize <- round(0.7 * nrow(dtn), 0)
MakeNum <- function(x) as.numeric(as.factor(x))
dtn <- mutate(dt, across(1:5, MakeNum))
dtn
str(dtn)
glimpse(dtn)
set.seed(123)
samplesize <- round(0.7 * nrow(dtn), 0)
index <- sample(seq_len(nrow(dtn)), size = samplesize)
data_train <- dtn[index, ]
data_test <- dtn[-index, ]
#xay dung model Multiple Linear Regression
student_lm <- lm(total_score ~ reading_score + writing_score + gender + test_preparation_course, data = data_train)
summary(student_lm)
#du doan tap du lieu data_test
lm_pred <- predict(student_lm, newdata = data_test %>% select(-total_score))
# RMSE of train dataset
RMSE(pred = student_lm$fitted.values, obs = data_train$total_score)
# RMSE of test dataset
RMSE(pred = lm_pred, obs = data_test$total_score)
plot(student_lm)
newdata = data.frame(reading_score = c(90,57), writing_score = c(90,44), gender = c(2,2), test_preparation_course = c(1,2))
predictions = predict.lm(student_lm, newdata)
predictions
ggplot(data_test, aes(x=lm_pred, y= data_test$total_score)) +
geom_point() +
geom_abline(intercept=0, slope=1) +
labs(x='Predicted Values', y='Actual Values', title='Predicted vs. Actual Values')
ggplot(data_test, aes(x=lm_pred, y=total_score)) +
geom_point() +
geom_abline(intercept=0, slope=1) +
labs(x='Predicted Values', y='Actual Values', title='Predicted vs. Actual Values')
by_race_ethnicity <- dt %>%
group_by(race.ethnicity) %>%
summarise(math_score_mean = mean(math_score), math_score_var = var(math_score), math_score_sd = sd(math_score)) %>% arrange(desc(math_score_mean))
by_race_ethnicity
ggplot(by_race_ethnicity, aes(x = race.ethnicity, y = math_score_mean, fill = race.ethnicity)) + geom_col() + ggtitle("Comparison of Students Math Score", subtitle = "By Race Ethnicity") + xlab("Race Ethnicity") + ylab("Math Score Average")
aov(math_score ~ race.ethnicity, data = dt)
summary(aov(math_score ~ race.ethnicity, data = dt))
by_parent_education <- dt %>%
group_by(parental_level_of_education) %>%
summarise(math_score_mean = mean(math_score), math_score_sd = sd(math_score)) %>% arrange(desc(math_score_mean))
by_parent_education
ggplot(by_parent_education, aes(x = reorder(parental_level_of_education, math_score_mean),
y = math_score_mean, fill = parental_level_of_education)) +
geom_col() + ggtitle("Comparison of Students Math Score", subtitle = "By Parental Education Level") +                                          xlab("Parental Level of Education") + ylab("Math Score Average") +
theme(axis.text.x = element_text(angle = 15)) +
scale_fill_manual(values = c("green", "blue", "red", "purple", "yellow", "orange"))
summary(aov(math_score ~ parental_level_of_education, data = dt))
summary(aov(math_score ~ parental_level_of_education + race.ethnicity, data = dt))
summary(aov(math_score ~ parental_level_of_education:race.ethnicity, data = dt))
knitr::opts_chunk$set(echo = TRUE)
library(highcharter)
library(corrplot)
library(randomForest)
library(caTools)
library(ROCR)
library(e1071)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(htmlwidgets)
library('IRdisplay')
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(ranger)
library(ggpubr)
library(naniar)
library(car)
library(caret)
library(parsnip)
library(highcharter)
library(corrplot)
library(randomForest)
library(caTools)
library(ROCR)
library(e1071)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(htmlwidgets)
library('IRdisplay')
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(ranger)
library(ggpubr)
library(naniar)
library(car)
library(caret)
library(parsnip)
#Import data
dt = read.csv("./StudentsPerformance.csv", header = TRUE)
str(dt)
students <- dt %>%
pivot_longer(cols = c(math_score, reading_score, writing_score), names_to = "subject", values_to = "score") %>%
separate(subject, c("subject",NA))
students
#Tên các biến
names(dt)
#Kiểu dữ liệu từng biến
sapply(dt, class)
is.null(dt)
sapply(dt %>% select_if(is.numeric), function(x) {sum(is.na(x)) / length(x)})
sapply(dt %>% select_if(is.character), function(x) {table(x, useNA = "ifany")})
summary(dt)
